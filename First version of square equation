#include <stdio.h>
#include <math.h>
#include <assert.h>
#include <stdlib.h>
#define INF_ROOTS -1
int SolveEquation(double a, double b, double c, double* x1, double* x2);

/*----------------------------------------------------------------------*/

int main() {
	double a, b, c, x1, x2;
	a = b = c = 0;
	x1 = x2 = 0;
	printf("Enter equation coefficients\n");
	scanf("%lg %lg %lg", &a, &b, &c);
	int num_of_roots = SolveEquation(a, b, c, &x1, &x2);
	switch (num_of_roots) {
	case 0: printf("No roots\n");
		break;
	case 1: printf("x1=%lg\n", x1);
		break;
	case 2: printf("x1=%lg\n", x1);
		printf("x2=%lg\n", x2);
		break;
	case INF_ROOTS: printf("Any number");
		break;
	default: printf("ERROR: num_of_roots = %d", num_of_roots);
		return 1;
	}
	return 0;
}

/*----------------------------------------------------------------------*/
/*function to solve a square equation*/
int SolveEquation(double a, double b, double c, double* x1, double* x2) {
	assert(isfinite(a));
	assert(isfinite(b));
	assert(isfinite(c));

	assert(x1 != NULL);
	assert(x2 != NULL);
	assert(x1 != x2);

	if (a == 0) {
		if (b == 0)
		{
			return (c == 0) ? INF_ROOTS : 0;
		}
		else
		{
			*x1 = -c / b;
			return 1;
		}
	}
	else
	{
		float d = b * b - 4 * a * c;
		if (d == 0) {
			*x1 = *x2 = -b / (2 * a);
			return 1;
		}
		else
		{
			*x1 = (-b - sqrt(d)) / (2 * a);
			*x2 = (-b + sqrt(d)) / (2 * a);
			return 2;
		}
	}
}
